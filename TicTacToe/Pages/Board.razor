<div>
    <div class="status">@Status</div>
    <div class="board-row">
        <Square HandleClick='(e) => Play(0)' Value="@square[0]"/>
        <Square HandleClick='(e) => Play(1)' Value="@square[1]" />
        <Square HandleClick='(e) => Play(2)' Value="@square[2]" />
    </div>
    <div class="board-row">
        <Square HandleClick='(e) => Play(3)' Value="@square[3]"/>
        <Square HandleClick='(e) => Play(4)' Value="@square[4]" />
        <Square HandleClick='(e) => Play(5)' Value="@square[5]" />
    </div>
    <div class="board-row">
        <Square HandleClick='(e) => Play(6)' Value="@square[6]" />
        <Square HandleClick='(e) => Play(7)' Value="@square[7]" />
        <Square HandleClick='(e) => Play(8)' Value="@square[8]" />
    </div>
</div>

@code {

    string NextPlayer = "X";
    string Status = "Next player : X";

    string[] square = new string[9];
    bool xIsNext = true;

    void Play(int e)
    {
        var winner = DetermineWinner(square);
        bool winnerDetermined = winner != null;

        if (!winnerDetermined && string.IsNullOrWhiteSpace(square[e]))
        {
            square[e] = xIsNext ? "X" : "O";

            NextPlayer = xIsNext ? "O" : "X";

            Status = $"Next player : {NextPlayer}";

            xIsNext = !xIsNext;

            UpdateGameResult(square, e);
        }

    }

    void UpdateGameResult(string[] squares, int player)
    {
        string winner = DetermineWinner(square);

        if (square.All(x => !string.IsNullOrWhiteSpace(x)) && winner == null)
            Status = "Tied";

        if(winner != null) 
            Status = $"Winner is {square[player]}";
    }

    string DetermineWinner(string[] squares)
    {
        // this represents different ways a player can win the game

        int[][] winningLines = new int[][]
        {
            new int[] {0, 1, 2},
            new int[] {3, 4, 5},
            new int[] {6, 7, 8},
            new int[] {0, 3, 6},
            new int[] {1, 4, 7},
            new int[] {2, 5, 8},
            new int[] {0, 4, 8},
            new int[] {2, 4, 6}
        };

        foreach (int[] lines in winningLines)
        {
            int lineOne = lines[0];
            int lineTwo = lines[1];
            int lineThree = lines[2];

            if (!string.IsNullOrEmpty(squares[lineOne]) && squares[lineOne] == squares[lineTwo] && squares[lineOne] == squares[lineThree])
            {
                return squares[lineOne];
            }
        }
        return null;

    }
}
